version: '3.0'
services:
  rabbitmq:
    build: ./rabbitmq
    restart: always
    networks:
      mydockernet:
        ipv4_address: 172.18.0.2
    ports:
      - "8883:8883"
      - "5671:5671"
    expose:
      - "8883"
      - "5671"
    environment:
      - CONFIG_USE_ECC
  mongodb:
    build: ./mongodb
    restart: always
    networks:
      mydockernet:
        ipv4_address: 172.18.0.3
    ports:
      - "27017:27017"
    volumes:
      - "mydockervol:/data/db"
  restapi:
    build: ./restapi
    restart: always
    networks:
      mydockernet:
        ipv4_address: 172.18.0.4
    ports:
      - "8000:8000"
    depends_on:
      - rabbitmq
      - mongodb
    environment:
      - AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY
      - AWS_COGNITO_CLIENT_ID
      - AWS_COGNITO_USERPOOL_ID
      - AWS_COGNITO_USERPOOL_REGION
      - CONFIG_USE_ECC
  webapp:
    build: ./webapp
    restart: always
    networks:
      mydockernet:
        ipv4_address: 172.18.0.5
    ports:
      - "8100:8100"
    depends_on:
      - restapi
  nginx:
    build: ./nginx
    restart: always
    networks:
      mydockernet:
        ipv4_address: 172.18.0.6
    ports:
      - "443:443"
    expose:
      - "443"
    depends_on:
      - restapi
      - webapp
  notification:
    build: ./notification
    restart: always
    networks:
      mydockernet:
        ipv4_address: 172.18.0.7
    depends_on:
      - nginx
    environment:
      - AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY
      - AWS_PINPOINT_ID
      - AWS_PINPOINT_REGION
      - AWS_PINPOINT_EMAIL
      - CONFIG_USE_ECC
  history:
    build: ./history
    restart: always
    networks:
      mydockernet:
        ipv4_address: 172.18.0.8
    depends_on:
      - rabbitmq
      - mongodb
    environment:
      - CONFIG_USE_ECC
networks:
  mydockernet:
    driver: bridge
    ipam:
      config:
        - subnet: 172.18.0.0/16
volumes:
  mydockervol:
    driver: local
