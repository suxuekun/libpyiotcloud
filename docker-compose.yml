version: '3.0'
services:
  rabbitmq:
    build: ./rabbitmq
    restart: always
    networks:
      - mydockernet
    ports:
      - "8883:8883"
      - "15672:15672"
    expose:
      - "8883"
      - "15672"
    environment:
      - CONFIG_USE_ECC
    volumes:
      - "rabbitmq-data:/var/lib/rabbitmq"
  mongodb:
    build: ./mongodb
    restart: always
    networks:
      - mydockernet
    ports:
      - "27017:27017"
    volumes:
      - "mongodb-data:/data/db"
  restapi:
    build: ./restapi
    restart: always
    networks:
      - mydockernet
    ports:
      - "8000:8000"
    depends_on:
      - rabbitmq
      - mongodb
    environment:
      - AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY
      - AWS_COGNITO_CLIENT_ID
      - AWS_COGNITO_USERPOOL_ID
      - AWS_COGNITO_USERPOOL_REGION
      - CONFIG_USE_ECC
      - PAYPAL_CLIENT_ID
      - PAYPAL_CLIENT_SECRET
      - CONFIG_USE_MQTT_DEFAULT_USER
      - CONFIG_USE_MQTT_DEFAULT_PASS
      - CONFIG_USE_JWT_SECRET_KEY
      - AWS_S3_REGION
      - AWS_S3_BUCKET
      - AWS_S3_FILE_I2C_DEVICES
      - AWS_S3_FILE_SENSOR_DEVICES
  webapp:
    build: 
      context: ./webapp
      args:
        config_use_apiurl: ${CONFIG_USE_APIURL}
        config_use_jwtkey: ${CONFIG_USE_JWT_SECRET_KEY}
        config_use_googleapikey: ${GOOGLE_API_KEY}
    restart: always
    networks:
      - mydockernet
    ports:
      - "8100:8100"
    depends_on:
      - restapi
    environment:
      - CONFIG_USE_APIURL
      - CONFIG_USE_JWT_SECRET_KEY
      - GOOGLE_API_KEY
  nginx:
    build: 
      context: ./nginx
      args:
        config_use_certs: ${CONFIG_USE_CERTS}
    restart: always
    networks:
      - mydockernet
    ports:
      - "443:443"
    expose:
      - "443"
    depends_on:
      - restapi
      - webapp
    environment:
      - CONFIG_USE_CERTS
  notification:
    build: ./notification
    restart: always
    networks:
      - mydockernet
    depends_on:
      - rabbitmq
      - mongodb
    environment:
      - AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY
      - AWS_PINPOINT_ID
      - AWS_PINPOINT_REGION
      - AWS_PINPOINT_EMAIL
      - CONFIG_USE_ECC
      - TWILIO_ACCOUNT_SID
      - TWILIO_AUTH_TOKEN
      - TWILIO_NUMBER_FROM
      - NEXMO_KEY
      - NEXMO_SECRET
      - CONFIG_USE_EMAIL_MODEL
      - CONFIG_USE_SMS_MODEL
      - CONFIG_USE_MQTT_DEFAULT_USER
      - CONFIG_USE_MQTT_DEFAULT_PASS
  history:
    build: ./history
    restart: always
    networks:
      - mydockernet
    depends_on:
      - rabbitmq
      - mongodb
    environment:
      - CONFIG_USE_ECC
      - CONFIG_USE_MQTT_DEFAULT_USER
      - CONFIG_USE_MQTT_DEFAULT_PASS
  sensor:
    build: ./sensor
    restart: always
    networks:
      - mydockernet
    depends_on:
      - rabbitmq
      - mongodb
    environment:
      - CONFIG_USE_ECC
      - CONFIG_USE_MQTT_DEFAULT_USER
      - CONFIG_USE_MQTT_DEFAULT_PASS
  configuration:
    build: ./configuration
    restart: always
    networks:
      - mydockernet
    depends_on:
      - rabbitmq
      - mongodb
    environment:
      - CONFIG_USE_ECC
      - CONFIG_USE_MQTT_DEFAULT_USER
      - CONFIG_USE_MQTT_DEFAULT_PASS
networks:
  mydockernet:
    driver: bridge
volumes:
  rabbitmq-data:
    driver: local
  mongodb-data:
    driver: local
